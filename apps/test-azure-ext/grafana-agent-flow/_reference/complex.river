// #################################################################################
// Grafana Agent Flow can be configured to collect Prometheus metrics and forward them to any Prometheus-compatible database.
// https://grafana.com/docs/agent/latest/flow/getting-started/collect-prometheus-metrics/
// #################################################################################
prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir-nginx.mimir.svc.cluster.local/api/v1/push"
  }
  external_labels = {
          cluster = "opsstack",
          cloudProvider = "azure",
  }
}

// #################################################################################
// Discover Kubernetes pods to collect metrics from.
// inspration from https://github.com/rfratto/agent-modules/blob/main/k8s_pods/module.river
// #################################################################################
discovery.kubernetes "pods" {
  role = "pod"
}

discovery.relabel "pods" {
	targets = discovery.kubernetes.pods.targets

	rule {
		source_labels = [
			"__meta_kubernetes_pod_label_app_kubernetes_io_instance",
			"__meta_kubernetes_pod_label_app_kubernetes_io_name",
		]
		target_label = "__helm_name__"
		separator    = "-"
		regex        = "(.+-.+)"
	}

	rule {
		// Try to identify a service name to eventually form the job label. We'll
		// prefer the first of the below labels, in descending order.
		source_labels = [
			"__meta_kubernetes_pod_label_k8s_app",
			"__meta_kubernetes_pod_label_app",
			"__meta_kubernetes_pod_label_name",
			"__helm_name__",
			"__meta_kubernetes_pod_controller_name",
			"__meta_kubernetes_pod_name",
		]
		target_label = "__service__"

		// Our in-memory string will be something like A;B;C;D;E;F, where any of the
		// letters could be replaced with a label value or be empty if the label
		// value did not exist.
		//
		// We want to match for the very first sequence of non-semicolon characters
		// which is either prefaced by zero or more semicolons, and is followed by
		// zero or more semicolons before the rest of the string.
		//
		// This is a very annoying way of being able to do conditionals, and
		// ideally we can use River expressions in the future to make this much
		// less bizarre.
		regex = ";*([^;]+);*.*"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_node_name"]
		target_label  = "__host__"
	}

	rule {
		source_labels = [
			"__meta_kubernetes_namespace",
			"__service__",
		]
		target_label = "job"
		separator    = "/"
	}

	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label  = "namespace"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label  = "pod"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label  = "container"
	}
}


discovery.relabel "metrics_pods" {
	targets = discovery.relabel.pods.output

	rule {
		action        = "keep"
		regex         = ".*-metrics"
		source_labels = ["__meta_kubernetes_pod_container_port_name"]
	}

	rule {
		action        = "drop"
		regex         = "Succeeded|Failed"
		source_labels = ["__meta_kubernetes_pod_phase"]
	}

	rule {
		action        = "replace"
		separator     = ":"
		source_labels = ["__meta_kubernetes_pod_name", "__meta_kubernetes_pod_container_name", "__meta_kubernetes_pod_container_port_name"]
		target_label  = "instance"
	}
}

// Scrape metrics from Kubernetes pods and send to a prometheus.remote_write
prometheus.scrape "metrics_pods" {
  targets    = discovery.relabel.metrics_pods.output
  forward_to = [prometheus.remote_write.default.receiver]
}

// #################################################################################
//  discover k8s Services in the cluster
// #################################################################################

discovery.kubernetes "nodes" {
    role = "node"
}

discovery.kubernetes "services" {
    role = "service"
}

discovery.kubernetes "endpoints" {
    role = "endpoints"
}

discovery.kubernetes "endpointslices" {
    role = "endpointslice"
}

discovery.kubernetes "ingresses" {
    role = "ingress"
}

prometheus.scrape "metrics" {
  targets = concat(
    discovery.kubernetes.nodes.targets,
    discovery.kubernetes.services.targets,
    discovery.kubernetes.endpoints.targets,
    discovery.kubernetes.endpointslices.targets,
    discovery.kubernetes.ingresses.targets,
  )
  forward_to = [prometheus.remote_write.default.receiver]
}

// #################################################################################
// Custom prometheus targets
// #################################################################################
prometheus.scrape "custom_targets" {
  targets = [
    // {
    //  __address__ = "prometheus:9090",
    // },
    {
      __address__ = "mimir-nginx.mimir.svc.cluster.local",
      __scheme__  = "http",
    },
    {
      __address__      = "tempo.tempo.svc.cluster.local",
      __metrics_path__ = "/metrics",
    },
    // {
    //   __address__ = "grafana-agent:12345",
    //   application = "grafana-agent",
    //   environment = "production",
    // },
  ]

  forward_to = [prometheus.remote_write.default.receiver]
}
